{
  "active": false,
  "connections": {
    "⏰ Planificateur d’Idées (n8n Schedule)": {
      "main": [
        [
          {
            "node": "💡 Génère une Idée Virale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 Enregistre l’Idée": {
      "main": [
        [
          {
            "node": "🎞️ Génère les Prompts de Scènes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🧩 Sépare les Scènes (n8n Code Node)": {
      "main": [
        [
          {
            "node": "🎥 Crée les Clips Vidéo (Wavespeed - seedance-v1-pro-t2v)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📦 Formate les Scènes": {
      "ai_outputParser": [
        [
          {
            "node": "🎞️ Génère les Prompts de Scènes_old",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "🎥 Crée les Clips Vidéo (Wavespeed - seedance-v1-pro-t2v)": {
      "main": [
        [
          {
            "node": "⏳ Attente Génération des Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⏳ Attente Génération des Clips": {
      "main": [
        [
          {
            "node": "📥 Récupère les Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Récupère les Clips": {
      "main": [
        [
          {
            "node": "🔊 Crée les Sons ASMR (fal-ai - mmaudio-v2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔊 Crée les Sons ASMR (fal-ai - mmaudio-v2)": {
      "main": [
        [
          {
            "node": "⏳ Attente Génération des Sons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⏳ Attente Génération des Sons": {
      "main": [
        [
          {
            "node": "📥 Récupère les Sons ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Récupère les Sons ": {
      "main": [
        [
          {
            "node": "📃 Liste les Clips Vidéo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📃 Liste les Clips Vidéo": {
      "main": [
        [
          {
            "node": "🎬 Monte la Vidéo Finale (fal-ai - ffmpeg-api/compose",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎬 Monte la Vidéo Finale (fal-ai - ffmpeg-api/compose": {
      "main": [
        [
          {
            "node": "⏳ Attente Vidéo Finale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⏳ Attente Vidéo Finale": {
      "main": [
        [
          {
            "node": "📥 Récupère la Vidéo Finale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Récupère la Vidéo Finale": {
      "main": [
        [
          {
            "node": "✅ Enregistre la Vidéo Finale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " 🤖 Modèle GPT-4.1 (OpenAI API)": {
      "ai_languageModel": [
        []
      ]
    },
    " 🧠 Think Tool Linker": {
      "ai_tool": [
        [
          {
            "node": "💡 Génère une Idée Virale_old",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "🎞️ Génère les Prompts de Scènes_old",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🤖 Modèle Saunet 3.7 (Anthropic API)": {
      "ai_languageModel": [
        [
          {
            "node": "💡 Génère une Idée Virale_old",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "🎞️ Génère les Prompts de Scènes_old",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "📦 Formate les Scènes1": {
      "ai_outputParser": [
        [
          {
            "node": "🎞️ Génère les Prompts de Scènes",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "💡 Génère une Idée Virale_old": {
      "main": [
        [
          {
            "node": "📊 Enregistre l’Idée",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💡 Génère une Idée Virale": {
      "main": [
        [
          {
            "node": "📊 Enregistre l’Idée",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎞️ Génère les Prompts de Scènes_old": {
      "main": [
        [
          {
            "node": "🧩 Sépare les Scènes (n8n Code Node)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎞️ Génère les Prompts de Scènes": {
      "main": [
        [
          {
            "node": "🧩 Sépare les Scènes (n8n Code Node)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "💡 Génère une Idée Virale",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "🎞️ Génère les Prompts de Scènes",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "📝 Formate l’Idée_old": {
      "ai_outputParser": [
        [
          {
            "node": "💡 Génère une Idée Virale_old",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "📝 Formate l’Idée": {
      "ai_outputParser": [
        [
          {
            "node": "💡 Génère une Idée Virale",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-25T08:22:14.048Z",
  "id": "M24JDLL1dkUkC11t",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "ASMR",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        380,
        200
      ],
      "id": "c953d45b-eddb-4c0c-a788-b50a9feabc36",
      "name": "⏰ Planificateur d’Idées (n8n Schedule)"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc",
          "mode": "list",
          "cachedResultName": "ASMR",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID": "=ROW()-1",
            "Caption": "={{ $json.output[0].Caption }}",
            "Idea": "={{ $json.output[0].Idea }}",
            "Environment": "={{ $json.output[0].Environment }}",
            "Sound": "={{ $json.output[0].Sound }}",
            "Status": "={{ $json.output[0].Status }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Idea",
              "displayName": "Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Environment",
              "displayName": "Environment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Sound",
              "displayName": "Sound",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "URL",
              "displayName": "URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1060,
        200
      ],
      "id": "2f533dd9-af14-4107-b1f7-2a7af542b405",
      "name": "📊 Enregistre l’Idée",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "G9J66r6X95onAdYf",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function findSceneEntries(obj) {\n  const scenes = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (key.toLowerCase().startsWith(\"scene\") && typeof value === \"string\") {\n      scenes.push(value);\n    } else if (typeof value === \"object\" && value !== null) {\n      scenes.push(...findSceneEntries(value));\n    }\n  }\n\n  return scenes;\n}\n\nlet output = [];\n\ntry {\n  const inputData = items[0].json;\n  const scenes = findSceneEntries(inputData);\n\n  if (scenes.length === 0) {\n    throw new Error(\"No scene keys found at any level.\");\n  }\n\n  output = scenes.map(scene => ({ description: scene }));\n} catch (e) {\n  throw new Error(\"Could not extract scenes properly. Details: \" + e.message);\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2260,
        200
      ],
      "id": "26c5acd2-3161-4ad9-968c-84538169ec9d",
      "name": "🧩 Sépare les Scènes (n8n Code Node)"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Idea\": \"An obsidian rock being sliced with a shimmering knife\",\n  \"Environment\": \"Clean studio table, subtle light reflections\",\n  \"Sound\": \"Crisp slicing, deep grinding, and delicate crumbling\",\n  \"Scene 1\": \"Extreme macro shot: a razor-sharp, polished knife blade presses into the dark, granular surface of an obsidian rock, just beginning to indent.\",\n  \"Scene 2\": \"Close-up: fine, iridescent dust particles erupt from the point of contact as the blade cuts deeper into the obsidian, catching the studio light.\",\n  \"Scene 3\": \"Mid-shot: the knife, held perfectly steady, has formed a shallow, clean groove across the obsidian's shimmering surface, revealing a new, smooth texture.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2100,
        500
      ],
      "id": "8405878f-4fba-4ea0-8ec5-ecd260c510b7",
      "name": "📦 Formate les Scènes"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.wavespeed.ai/api/v3/bytedance/seedance-v1-pro-t2v-480p",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"aspect_ratio\": \"9:16\",\n  \"duration\": 10,\n  \"prompt\": \"VIDEO THEME: {{ $('💡 Génère une Idée Virale').last().json.values()[0][0][\"Idea\"] }} | WHAT HAPPENS IN THE VIDEO: {{ $json.description }} | WHERE THE VIDEO IS SHOT: {{ $('💡 Génère une Idée Virale').last().json.values()[0][0][\"Environment\"] }}\"\n}\n",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 3000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2660,
        200
      ],
      "id": "a4da2776-b823-413f-be80-627085b75259",
      "name": "🎥 Crée les Clips Vidéo (Wavespeed - seedance-v1-pro-t2v)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "SHzAhbyjzdbsCqGu",
          "name": "WaveSpeed"
        }
      }
    },
    {
      "parameters": {
        "amount": 240
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2880,
        200
      ],
      "id": "d3eb03e0-73d4-4c0b-88cd-8f50e6e12843",
      "name": "⏳ Attente Génération des Clips",
      "webhookId": "3ef8e370-50cf-489e-8775-bf502ce60a26"
    },
    {
      "parameters": {
        "url": "=https://api.wavespeed.ai/api/v3/predictions/{{ $json.data.id }}/result",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3100,
        200
      ],
      "id": "6a6f787f-f4ef-447d-8650-ec479f58f42f",
      "name": "📥 Récupère les Clips",
      "credentials": {
        "httpHeaderAuth": {
          "id": "SHzAhbyjzdbsCqGu",
          "name": "WaveSpeed"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/mmaudio-v2 ",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "= {\n        \"prompt\": \"ASMR Soothing sound effects. {{ $('💡 Génère une Idée Virale').last().json.values()[0][0][\"Sound\"] }}\",\n        \"duration\": 10,\n        \"video_url\": \"{{ $json.data.outputs[0] }}\"\n  }\n",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3460,
        200
      ],
      "id": "ce33465a-1f65-47b5-a751-402cc3e2e871",
      "name": "🔊 Crée les Sons ASMR (fal-ai - mmaudio-v2)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Ip3FJ01QyOgXPuLK",
          "name": "FalAi"
        }
      }
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3680,
        200
      ],
      "id": "3a161b94-cf9c-4a6c-8974-2b6707cfe13b",
      "name": "⏳ Attente Génération des Sons",
      "webhookId": "e8f621a2-912d-43ad-ac67-0f135a441870"
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/mmaudio-v2/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3900,
        200
      ],
      "id": "eaaf9ba8-2910-47cd-b284-e8169ec3ec56",
      "name": "📥 Récupère les Sons ",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Ip3FJ01QyOgXPuLK",
          "name": "FalAi"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    video_urls: items.map(item => item.json.video.url)\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4260,
        200
      ],
      "id": "1f2e321b-ea14-48bc-89f3-353d5992fb59",
      "name": "📃 Liste les Clips Vidéo"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/ffmpeg-api/compose",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"tracks\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"video\",\n      \"keyframes\": [\n        { \"url\": \"{{ $json.video_urls[0] }}\", \"timestamp\": 0, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[1] }}\", \"timestamp\": 10, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[2] }}\", \"timestamp\": 20, \"duration\": 10 }\n      ]\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4480,
        200
      ],
      "id": "77db2731-33be-43c9-84d8-ec320458ce06",
      "name": "🎬 Monte la Vidéo Finale (fal-ai - ffmpeg-api/compose",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Ip3FJ01QyOgXPuLK",
          "name": "FalAi"
        }
      }
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4700,
        200
      ],
      "id": "6a9f6f3f-6f6e-4af7-9663-9c874a390696",
      "name": "⏳ Attente Vidéo Finale",
      "webhookId": "4d45095b-ac57-450c-a05c-0fba53294131"
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/ffmpeg-api/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5080,
        200
      ],
      "id": "2d64836a-a8e2-4544-a7f8-db992d181f02",
      "name": "📥 Récupère la Vidéo Finale",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Ip3FJ01QyOgXPuLK",
          "name": "FalAi"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc",
          "mode": "list",
          "cachedResultName": "ASMR",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GgYaWHWrhQp8Zi975F4HT-dMcLmAldWXgNkFGOZLeSc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Idea": "={{ $('💡 Génère une Idée Virale').last().json.values()[0][0][\"Idea\"] }}",
            "URL": "={{ $json.video_url }}"
          },
          "matchingColumns": [
            "Idea"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Idea",
              "displayName": "Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Environment",
              "displayName": "Environment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Sound",
              "displayName": "Sound",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "URL",
              "displayName": "URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        5300,
        200
      ],
      "id": "6cf13cb5-054e-411a-bd57-499ca25d40ea",
      "name": "✅ Enregistre la Vidéo Finale",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "G9J66r6X95onAdYf",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1620,
        520
      ],
      "id": "f2eefb24-423e-42c8-b233-5aecc4a654ac",
      "name": " 🤖 Modèle GPT-4.1 (OpenAI API)",
      "credentials": {
        "openAiApi": {
          "id": "v1DLTzLc10CcUL14",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        1320,
        520
      ],
      "id": "5c1727e1-db2e-47d0-bb3b-3372b258bcea",
      "name": " 🧠 Think Tool Linker"
    },
    {
      "parameters": {
        "content": "## ⏰ Déclencheur Automatique\n\nCe nœud lance automatiquement le workflow selon une planification définie.  \nIl permet de générer de nouveaux contenus à intervalles réguliers (par exemple : chaque jour, semaine…).\n",
        "height": 500,
        "width": 380,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        220,
        -60
      ],
      "typeVersion": 1,
      "id": "21718b41-f2c0-4a3d-9d83-5d17a7480a14",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 🎞️ Génération de Prompts Cinématographiques\n\nL'IA décompose l'idée principale en 13 scènes ultra-visuelles, détaillant :\n- l'objet à couper,\n- le décor,\n- la texture du matériau,\n- les mouvements du couteau.\n\nCes scènes serviront à générer des clips vidéo cohérents.\n",
        "height": 500,
        "width": 1060,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1420,
        -60
      ],
      "typeVersion": 1,
      "id": "add54145-34cd-4f71-a350-f14be0cac079",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## 💡 Génération d'Idée Virale\n\nUne idée visuelle et originale est générée par une IA (GPT-4) à partir d’un prompt système.  \nL’idée est formatée en JSON, enregistrée dans un Google Sheet, et utilisée comme base pour la création de vidéos et de sons.\n",
        "height": 500,
        "width": 640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        660,
        -60
      ],
      "typeVersion": 1,
      "id": "03917666-1797-4e06-aed0-fbbebc76489d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## 🎥 Création des Clips Vidéo\n\nChaque scène est envoyée à Wavespeed pour créer une vidéo courte (10 sec).  \nUne pause est nécessaire pour attendre le rendu avant de récupérer les vidéos.\n\n🌀 **Service utilisé** : [Wavespeed](https://wavespeed.ai/center/default/invites/O3bd381704e0a4dbd984bf6ec496f2af1JaxNpJmiWIsKcFAP)  \n(nécessite un compte et une clé API)\n\nLes clips seront ensuite assemblés ensemble.\n",
        "height": 500,
        "width": 700
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2580,
        -60
      ],
      "typeVersion": 1,
      "id": "72a45d5c-2e04-49e7-9988-ddf163061947",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## 🔊 Génération des Sons ASMR\n\nUn son réaliste est généré pour accompagner les vidéos, selon la description sonore produite par l’IA.\n\nfal.ai est utilisé ici pour créer une ambiance sonore immersive.\n",
        "height": 500,
        "width": 660,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3400,
        -60
      ],
      "typeVersion": 1,
      "id": "31b8cd35-bdd5-4701-85c5-5a34f7d324e7",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## 🎬 Montage de la Vidéo Finale\n\nLes clips sont assemblés en une seule vidéo à l’aide de fal.ai (via l’API FFmpeg).  \nChaque clip est positionné précisément sur la timeline pour former une séquence fluide.\n\nUne attente est nécessaire avant de récupérer le rendu final.\n",
        "height": 500,
        "width": 700,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4180,
        -60
      ],
      "typeVersion": 1,
      "id": "7260577f-4322-46c7-a18a-fa8492aa03c5",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## ✅ Enregistrement de la Vidéo Finale\n\nLa vidéo produite est ajoutée dans un Google Sheet pour archivage.  \nCela permet de suivre facilement quelles idées ont été traitées et produites.\n\nTu peux ensuite la publier ou l’analyser plus tard.\n",
        "height": 500,
        "width": 580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4980,
        -60
      ],
      "typeVersion": 1,
      "id": "d98bf447-1b65-4a49-9ffc-4e6c5ff91ce0",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-7-sonnet-20250219",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 3.7"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        580,
        560
      ],
      "id": "b8853967-5dff-41b1-b5a9-6241325da225",
      "name": "🤖 Modèle Saunet 3.7 (Anthropic API)",
      "credentials": {
        "anthropicApi": {
          "id": "GfLb586wOGkPPztD",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1800,
        480
      ],
      "id": "c11a9471-7f3d-4217-871d-50b4fab3bd06",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "9axkEK1RzTaPyAL7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Idea\": \"Spider-Man battles Doctor Strange across shifting portals and city rooftops\",\n  \"Environment\": \"City skyline at dusk, swirling mystic portals, energized air, cinematic realism\",\n  \"Sound\": \"Whoosh of portals, web thwips, crackling magic energy, distant city noise\",\n  \"Scene 1\": \"Wide aerial shot: Spider-Man swings between skyscrapers as glowing circular portals open in midair. Doctor Strange emerges, cloak billowing, summoning an orange glyph. Tension ripples the air; city lights reflect off glass surfaces.\",\n  \"Scene 2\": \"Tight angle: Spider-Man launches a web but Strange redirects it with a swirling shield. Energy sparks fly from the collision point, warping the web as light distorts around the portal edge. Shoes scrape concrete as both adjust stance.\",\n  \"Scene 3\": \"Dynamic tracking: Strange twists reality, rooftop bricks floating. Spider-Man somersaults, evading thrown debris; his suit taut and reflective under magic light. Strange’s hand gestures cast shimmering sigils, fragments swirling, energy resonating.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2380,
        -160
      ],
      "id": "45469679-d091-456a-ba47-95afa95c38da",
      "name": "📦 Formate les Scènes1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Give me an idea about \n\n[[\na random hard material or element that has the shape of an aliment being sliced with a sharp knife - have your idea be in this format: \"(color) (material) shaped like a (random aliment)\". Examples for your inspiration: glass shaped like a strawberry, crystal shaped like a candy, dry ice shaped like a chocolate bar, diamond shaped like a cherry, etc. \n]]\n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role**: You are an AI designed to generate 1 immersive, realistic idea based on a user-provided topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"glass cutting ASMR,\" \"wood carving sounds,\" \"satisfying rock splits\").\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nCan be as surreal as you can get, doesn't have to be real-world!\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n** 4 topic-relevant hashtags\n** 4 all-time most popular hashtags\n** 4 currently trending hashtags (based on live research)\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. clean studio table, rough natural terrain, laboratory bench)\n\nKey visuals or background details (e.g. dust particles, polished surface, subtle light reflections)\n\nStyle of scene (e.g. macro close-up, cinematic slow-motion, minimalist, abstract)\n\nOk with fictional settings.\n\nThe Sound must:\n\nBe under 15 words.\n\nDescribe the primary sound that makes sense to happen in the video. This will be fed to a sound model later on.\n\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Caption\": \"Short viral title with emoji #4_topic_hashtags #4_all_time_popular_hashtags #4_trending_hashtags\",\n    \"Idea\": \"Short idea under 13 words\",\n    \"Environment\": \"Brief vivid setting under 20 words matching the action\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        700,
        200
      ],
      "id": "1669b008-faaa-4e9c-8b65-377b8f2afcd3",
      "name": "💡 Génère une Idée Virale_old"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Give me an idea about\n\n[[\na unique Marvel Cinematic Universe superhero duel between two characters — format the idea as: \"(Hero 1) vs (Hero 2) in/at (distinct MCU setting or event)\". Examples for your inspiration: Spider-Man vs Black Panther on the Wakandan plains, Doctor Strange vs Scarlet Witch in the Mirror Dimension, Iron Man vs Thor atop Stark Tower, Captain Marvel vs Hulk during a S.H.I.E.L.D. helicarrier invasion, etc.\n]]\n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role**: You are an AI designed to generate 1 immersive, MCU-superhero-duel idea based on a user-provided topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"Iron Man vs Captain America duel,\" \"wanda vs doctor strange.\")\n\nThe Idea must:\n\n- Be under 13 words.\n- Describe an intense, visually striking or viral-worthy duel sequence between two MCU super-heroes.\n- Can be MCU-canon or completely original as long as the characters are from the MCU.\n\nThe Caption must be:\n\n- Short, punchy, and viral-friendly.\n- Include one relevant emoji.\n- Include exactly 12 hashtags in the following order:\n    * 4 topic-specific hashtags (MCU, hero names, duel, powers)\n    * 4 all-time most popular hashtags\n    * 4 currently trending hashtags (fictional or based on recent MCU buzz)\n\n- All hashtags in lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\n- Be under 20 words.\n- Clearly set the duel location (epic or iconic MCU setting, can be fictional).\n- Mention key visuals or background cues (e.g. flickering debris, shattered glass, neon reflections).\n- Style of scene (e.g. cinematic wide shot, slow-motion close-up, atmospheric fog, energy storms).\n\nThe Sound must:\n\n- Be under 15 words.\n- Describe the primary sound or combination of duel sounds.\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Caption\": \"Short viral title with emoji #4_topic_hashtags #4_all_time_popular_hashtags #4_trending_hashtags\",\n    \"Idea\": \"Short MCU duel idea under 13 words\",\n    \"Environment\": \"Brief, vivid setting under 20 words matching the duel\",\n    \"Sound\": \"Primary sound (or blend) for the scene, under 15 words\",\n    \"Status\": \"for production\"\n  }\n]\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"glass cutting ASMR,\" \"wood carving sounds,\" \"satisfying rock splits\").\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nCan be as surreal as you can get, doesn't have to be real-world!\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n** 4 topic-relevant hashtags\n** 4 all-time most popular hashtags\n** 4 currently trending hashtags (based on live research)\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. clean studio table, rough natural terrain, laboratory bench)\n\nKey visuals or background details (e.g. dust particles, polished surface, subtle light reflections)\n\nStyle of scene (e.g. macro close-up, cinematic slow-motion, minimalist, abstract)\n\nOk with fictional settings.\n\nThe Sound must:\n\nBe under 15 words.\n\nDescribe the primary sound that makes sense to happen in the video. This will be fed to a sound model later on.\n\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Caption\": \"Short viral title with emoji #4_topic_hashtags #4_all_time_popular_hashtags #4_trending_hashtags\",\n    \"Idea\": \"Short idea under 13 words\",\n    \"Environment\": \"Brief vivid setting under 20 words matching the action\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        680,
        -320
      ],
      "id": "6c244daa-c2bb-4c22-86f9-23e6b9b2d702",
      "name": "💡 Génère une Idée Virale"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Give me 3 video prompts based on the previous idea\n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Role: You are a prompt-generation AI specializing in cinematic, ASMR-style video prompts. Your task is to generate a multi-scene video sequence that vividly shows a sharp knife actively cutting through a specific object in a clean, high-detail setting.\n\nYour writing must follow this style:\n\nSharp, precise cinematic realism.\n\nMacro-level detail with tight focus on the blade interacting with the object.\n\nThe knife must always be in motion — slicing, splitting, or gliding through the material. Never idle or static.\n\nCamera terms are allowed (e.g. macro view, tight angle, over-the-blade shot).\n\nEach scene must contain all of the following, expressed through detailed visual language:\n\n✅ The main object or subject (from the Idea)\n\n✅ The cutting environment or surface (from the Environment)\n\n✅ The texture, structure, and behavior of the material as it’s being cut\n\n✅ A visible, sharp blade actively cutting\n\nDescriptions should show:\n\nThe physical makeup of the material — is it translucent, brittle, dense, reflective, granular, fibrous, layered, or fluid-filled?\n\nHow the material responds to the blade — resistance, cracking, tearing, smooth separation, tension, vibration.\n\nThe interaction between the blade and the surface — light reflection, buildup of particles, contact points, residue or dust.\n\nAny ASMR-relevant sensory cues like particle release, shimmer, or subtle movement, but always shown visually — not narrated.\n\nTone:\n\nClean, clinical, visual.\n\nNo poetic metaphors, emotion, or storytelling.\n\nAvoid fantasy or surreal imagery.\n\nAll description must feel physically grounded and logically accurate.\n\nLength:\n\nEach scene must be between 1,000 and 2,000 characters.\n\nNo shallow or repetitive scenes — each must be immersive, descriptive, and specific.\n\nEach scene should explore a distinct phase of the cutting process, a different camera perspective, or a new behavior of the material under the blade.\n\nInputs:\n\nIdea: \"{{ $json.Idea }}\"\nEnvironment: \"{{ $json.Environment }}\"\nSound: \"{{ $json.Sound }}\"\n\nFormat:\n\nIdea: \"...\"\nEnvironment: \"...\"\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"\nScene 4: \"...\"\nScene 5: \"...\"\nScene 6: \"...\"\nScene 7: \"...\"\nScene 8: \"...\"\nScene 9: \"...\"\nScene 10: \"...\"\nScene 11: \"...\"\nScene 12: \"...\"\nScene 13: \"...\"\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1860,
        200
      ],
      "id": "c7d8fc5b-cc80-474b-86fc-14db49b40b78",
      "name": "🎞️ Génère les Prompts de Scènes_old"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Give me 3 video prompts based on the previous idea\n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Role: You are a prompt-generation AI specializing in cinematic, hyperrealistic, action video prompts. Your task is to generate a multi-scene video sequence that vividly depicts an active duel between two specific MCU superheroes, in a clean, high-detail environment.\n\nYour writing must follow this style:\n\nSharp, precise cinematic realism.\n\nMacro-level detail with tight focus on key moments of action, interaction, and power usage.\n\nBoth superheroes must always be in active motion – attacking, defending, countering, or maneuvering. No idle poses.\n\nCamera terms are allowed (e.g. tracking shot, top-down view, tight close-up, over-the-shoulder perspective, slow-motion insert).\n\nEach scene must include all of the following elements, captured in detailed visual language:\n\n✅ The two opposing MCU superheroes (from the Idea)\n\n✅ The environment, arena, or battleground (from the Environment)\n\n✅ The physical interaction of powers, costumes, and physical attacks – impacts, energy discharges, debris, light effects, motion blur, contact, and damage\n\n✅ The dynamic body language, gear, and specific abilities as they are used in the scene\n\nDescriptions should show:\n\nHow each superhero’s power or technique is physically visualized – energy type, material, luminosity, force, distortion, or residue.\n\nThe detailed response of the environment and each opponent to every attack or defensive move – surface cracks, splintering, flying debris, shield impact, kinetic rebound, dissipating sparks, or concussive force.\n\nThe interaction of suits, gear, or weapons with surroundings – scuff marks, blast residue, trailing energy, deformation.\n\nAny ASMR-relevant sensory cues such as heat shimmer, energy pulse, rainfall, or tactile impact shown visually — never narrated.\n\nTone:\n\nClean, clinical, visual.\n\nNo storytelling, no internal dialog, no emotional subtext.\n\nNo fantasy or surreal elements — all effects should match MCU physics and power depiction.\n\nAll description must be grounded in logical, MCU-consistent physicality.\n\nLength:\n\nEach scene must be between 1,000 and 2,000 characters.\n\nNo shallow or repetitive scenes — every scene must be immersive, descriptive, and specific.\n\nEach scene should explore a distinct phase of combat, a different camera perspective, or a new use of power/ability.\n\nInputs:\n\nIdea: \"{{ $json.Idea }}\"\nEnvironment: \"{{ $json.Environment }}\"\nSound: \"{{ $json.Sound }}\"\n\nFormat:\n\nIdea: \"...\"\nEnvironment: \"...\"\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1860,
        -280
      ],
      "id": "a33bf233-0d66-4005-a16d-4b57a68940d1",
      "name": "🎞️ Génère les Prompts de Scènes"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-7-sonnet-20250219",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 3.7"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        660,
        0
      ],
      "id": "0d375814-39cf-407a-ae37-32b1d0eb3b28",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "GfLb586wOGkPPztD",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1880,
        -60
      ],
      "id": "33d26afb-8811-465f-a8a8-0f9bf469e3fc",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "9axkEK1RzTaPyAL7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Diver Removes Nets Off Whale 🐋 #whalerescue #marinelife #oceanrescue #seahelpers #love #nature #instagood #explore #viral #savenature #oceanguardians #cleanoceans\",\n    \"Idea\": \"Diver carefully cuts tangled net from distressed whale in open sea\",\n    \"Environment\": \"Open ocean, sunlight beams through water, diver and whale, cinematic realism\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        960,
        560
      ],
      "id": "19a647ca-faf4-4bdc-9fc6-5e9010e9fabe",
      "name": "📝 Formate l’Idée_old"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Iron Man vs Thor Showdown ⚡️ #ironman #thor #marvelduel #mcuheroes #love #nature #instagood #explore #marvel #superheroes #avengers #trendingnow\",\n    \"Idea\": \"Iron Man and Thor clash with lightning and repulsor blasts in mid-air\",\n    \"Environment\": \"Rooftop at dusk, cracked concrete, glowing city lights, sparks fly, cinematic wide shot\",\n    \"Sound\": \"Thunder crashes, metal clangs, repulsor blasts echo\",\n    \"Status\": \"for production\"\n  }\n]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1060,
        -80
      ],
      "id": "36675a77-be9a-4651-ac69-9bf76d9c3ced",
      "name": "📝 Formate l’Idée"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-25T14:17:36.000Z",
  "versionId": "8c3b69d4-1477-45de-89f2-1f9027427b3f"
}