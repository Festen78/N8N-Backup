{
  "active": false,
  "connections": {
    "NocoDB": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Data Analyst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generer Graphique": {
      "main": [
        [
          {
            "node": "Agent Création Graphique",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Agent Création Graphique",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Agent Création Graphique",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Générer Graphique": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agent Création Graphique": {
      "main": [
        [
          {
            "node": "Reponse URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Data Analyst",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Data Analyst": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        [
          {
            "node": "Telegram2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "Data Analyst",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-18T07:21:36.950Z",
  "id": "Z2OxUEJmAkqW2TeZ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "=wmgy8wyp",
        "projectId": "py7zm0mlmyatrvb",
        "table": "={{ $('Edit Fields').item.json.table_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.nocoDbTool",
      "typeVersion": 3,
      "position": [
        760,
        500
      ],
      "id": "5b5aae1f-9abe-4989-9502-043f8d1a7829",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "kokuAQvlGKJRjBby",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "26eeb641-cb63-46b4-9709-1f08464d45a3",
              "name": "table_id",
              "value": "mpyyqb8udddlaax",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        900,
        80
      ],
      "id": "a889bbcb-f11e-4ea8-918b-9983dbe9aebc",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "url": "=https://app.nocodb.com/api/v2/meta/tables/{{ $json.table_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "nocoDbApiToken",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        300
      ],
      "id": "fc1c418f-7809-4ee0-8d20-46207367f2c3",
      "name": "HTTP Request",
      "credentials": {
        "nocoDbApiToken": {
          "id": "kokuAQvlGKJRjBby",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b89e97c0-d4fd-425d-9a58-a99b2fcc6bfb",
              "name": "columns",
              "value": "={{ $json.columns.map(item => item.title).toJsonString() }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        300
      ],
      "id": "f708e416-9b76-4467-8b72-415b1de6294e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        320,
        720
      ],
      "id": "a604f384-246b-4098-87af-6f06451d442d",
      "name": "Generer Graphique"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        500,
        920
      ],
      "id": "6e2527c8-681b-4422-a8ec-71c7c61ac452",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "v1DLTzLc10CcUL14",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"name\": \"chart_configuration\",\n  \"description\": \"Configuration schema for Chart.js charts\",\n  \"strict\": true,\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"type\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"bar\",\n          \"line\",\n          \"radar\",\n          \"pie\",\n          \"doughnut\",\n          \"polarArea\",\n          \"bubble\",\n          \"scatter\",\n          \"area\"\n        ]\n      },\n      \"data\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"labels\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"datasets\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"label\": {\n                  \"type\": [\n                    \"string\",\n                    \"null\"\n                  ]\n                },\n                \"data\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"number\"\n                  }\n                },\n                \"backgroundColor\": {\n                  \"type\": [\n                    \"array\",\n                    \"null\"\n                  ],\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"borderColor\": {\n                  \"type\": [\n                    \"array\",\n                    \"null\"\n                  ],\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"borderWidth\": {\n                  \"type\": [\n                    \"number\",\n                    \"null\"\n                  ]\n                }\n              },\n              \"required\": [\n                \"data\",\n                \"label\",\n                \"backgroundColor\",\n                \"borderColor\",\n                \"borderWidth\"\n              ],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\n          \"labels\",\n          \"datasets\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"options\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"scales\": {\n            \"type\": [\n              \"object\",\n              \"null\"\n            ],\n            \"properties\": {\n              \"yAxes\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": [\n                    \"object\",\n                    \"null\"\n                  ],\n                  \"properties\": {\n                    \"ticks\": {\n                      \"type\": [\n                        \"object\",\n                        \"null\"\n                      ],\n                      \"properties\": {\n                        \"max\": {\n                          \"type\": [\n                            \"number\",\n                            \"null\"\n                          ]\n                        },\n                        \"min\": {\n                          \"type\": [\n                            \"number\",\n                            \"null\"\n                          ]\n                        },\n                        \"stepSize\": {\n                          \"type\": [\n                            \"number\",\n                            \"null\"\n                          ]\n                        },\n                        \"beginAtZero\": {\n                          \"type\": [\n                            \"boolean\",\n                            \"null\"\n                          ]\n                        }\n                      },\n                      \"required\": [\n                        \"max\",\n                        \"min\",\n                        \"stepSize\",\n                        \"beginAtZero\"\n                      ],\n                      \"additionalProperties\": false\n                    }\n                  }\n                }\n              },\n              \"xAxes\": {\n                \"type\": [\n                  \"object\",\n                  \"null\"\n                ],\n                \"properties\": {\n                  \"stacked\": {\n                    \"type\": [\n                      \"boolean\",\n                      \"null\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"stacked\"\n                ],\n                \"additionalProperties\": false\n              }\n            },\n            \"required\": [\n              \"yAxes\",\n              \"xAxes\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"plugins\": {\n            \"type\": [\n              \"object\",\n              \"null\"\n            ],\n            \"properties\": {\n              \"title\": {\n                \"type\": [\n                  \"object\",\n                  \"null\"\n                ],\n                \"properties\": {\n                  \"display\": {\n                    \"type\": [\n                      \"boolean\",\n                      \"null\"\n                    ]\n                  },\n                  \"text\": {\n                    \"type\": [\n                      \"string\",\n                      \"null\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"display\",\n                  \"text\"\n                ],\n                \"additionalProperties\": false\n              },\n              \"legend\": {\n                \"type\": [\n                  \"object\",\n                  \"null\"\n                ],\n                \"properties\": {\n                  \"display\": {\n                    \"type\": [\n                      \"boolean\",\n                      \"null\"\n                    ]\n                  },\n                  \"position\": {\n                    \"type\": [\n                      \"string\",\n                      \"null\"\n                    ],\n                    \"enum\": [\n                      \"top\",\n                      \"left\",\n                      \"bottom\",\n                      \"right\",\n                      null\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"display\",\n                  \"position\"\n                ],\n                \"additionalProperties\": false\n              }\n            },\n            \"required\": [\n              \"title\",\n              \"legend\"\n            ],\n            \"additionalProperties\": false\n          }\n        },\n        \"required\": [\n          \"scales\",\n          \"plugins\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"required\": [\n      \"type\",\n      \"data\",\n      \"options\"\n    ],\n    \"additionalProperties\": false\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        780,
        920
      ],
      "id": "3e85fbf0-b860-4092-925b-12aa408f9687",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "name": "generer_graphiques",
        "description": "Appeles cet outi peut importe quand tu as besoin de générer un graphique. Toutes les valeurs string doivent être proprement espacés surtout les multi-line string. Quand tu analyse le output de cet ouil, URLs renvoyés doivent toujours être au format markdown par exemple,![](url)",
        "workflowId": {
          "__rl": true,
          "value": "JmWQ34k3ggrCJ0KT",
          "mode": "list",
          "cachedResultName": "Agent Data Analyst + Visualisation"
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"query\": {\n      \"type\": \"string\",\n      \"description\": \"Description du graphique à générer au format json\"\n  }\n}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.3,
      "position": [
        640,
        500
      ],
      "id": "f47755c8-54e6-4937-a0c0-f5f7a8facc69",
      "name": "Générer Graphique"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Données d'entrées : \n\n{{ $json.query.properties.query.description }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Je veux que vous agissiez en tant qu'expert en visualisation Chart.js. Votre objectif principal est de générer des objets de configuration Chart.js valides et clairement étiquetés en fonction des demandes des utilisateurs. Ces configurations doivent être directement utilisables dans un environnement Chart.js.\n\nEntrée : Vous recevrez des demandes des utilisateurs décrivant la visualisation souhaitée. Ces demandes peuvent inclure :\n\nType de graphique : (par exemple, barres, lignes, secteurs, nuages de points, radars, bulles, etc.)\nDonnées : Les données à visualiser. Elles peuvent être fournies sous différents formats (CSV, JSON, listes). Clarifiez les formats de données ambigus avec l'utilisateur. Gérez l'extraction des données si nécessaire.\nÉtiquettes : Étiquettes pour les points de données, les axes et d'autres éléments. L'utilisateur doit spécifiquement fournir des titres clairs pour les axes et les unités (si applicable). Posez des questions pour clarifier si ces informations manquent.\nStyle : Options de personnalisation (couleurs, polices, lignes de grille, titres, légendes, infobulles, échelles des axes). Utilisez les paramètres par défaut de Chart.js si aucun style spécifique n'est demandé.\nOptions spécifiques de Chart.js : Les utilisateurs peuvent demander des fonctionnalités spécifiques de Chart.js (échelles logarithmiques, animations, plugins).\nDescriptions en langage naturel : Interprétez des descriptions moins structurées et traduisez-les en configurations Chart.js valides.\nInformations sur les axes : Demandez et attendez des détails clairs sur les étiquettes des axes, y compris :\nTitres des axes : Titres concis pour les axes x et y (par exemple, \"Mois\", \"Ventes (USD)\").\nUnités : Unités de mesure, si pertinentes (par exemple, \"USD\", \"kg\").\nType de données : Le type de données sur chaque axe (catégoriel, numérique, série chronologique).\nFormatage spécifique : Exigences pour les formats de date/numéro, les symboles monétaires, etc.\nSortie : Un objet JSON valide, bien formaté et facilement lisible représentant une configuration Chart.js, prêt à être utilisé dans un constructeur new Chart(). La sortie doit inclure des étiquettes d'axes correctement configurées en fonction des informations fournies. Cela inclut l’ajout de titres et d’unités aux deux axes dans la section options.scales du JSON.\n\nExemple d'entrée (amélioré) :\n\n\"Créez un graphique à barres montrant les ventes mensuelles du premier trimestre 2024. Janvier a généré 10 000 $ de ventes, février 12 000 $, et mars 15 000 $. Utilisez du bleu pour les barres. Le titre du graphique doit être 'Ventes T1 2024'. L'axe des x représente les 'Mois' et l'axe des y représente les 'Ventes (USD)'.\"\n\nExemple de sortie (amélioré) : (Voir la réponse précédente pour le JSON avec les étiquettes d'axes)\n\nConsidérations importantes :\nValidation des données : Effectuez une validation de base et demandez des clarifications si les données sont incohérentes ou incomplètes.\nGestion des erreurs : Gérez les erreurs avec souplesse et informez l'utilisateur si sa demande ne peut pas être satisfaite.\nVersion de Chart.js : Supposons que la version stable la plus récente soit utilisée, sauf indication contraire.\nMeilleures pratiques : Adoptez les meilleures pratiques de Chart.js pour des visualisations efficaces.\nÉtiquettes claires pour les axes : Donnez la priorité à des étiquettes claires et informatives pour les axes dans toutes les configurations Chart.js générées."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        540,
        720
      ],
      "id": "9fe10405-cb3a-4211-9a2d-d4533b2ce7c1",
      "name": "Agent Création Graphique"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Edit Fields2').item.json.requete }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Vous êtes un agent d'analyse de données spécialisé dans l'utilisation de la base de données NocoDB. \n\n**GUIDE LINE** \nUtilise uniquement l'outil de création de graphique si l'utilisateur le demande. Quand tu généres le graphique, s'il te plait disply le résultat URL graph en markdown.\n\nVous avez accès à une base de données complète dont voici les colonnes :\n\n-**Contry Code** : Code du pays où le client est situé.\n-**Customer ID** : Identifiant unique du client.\n-**PaperlessDate** : Date à laquelle le client a opté pour la facturation sans papier.\n-**invoiceNumber** : Numéro unique de la facture.\n-**InvoiceDate** : Date d'émission de la facture.\n-**DueDate** : Date d'échéance de la facture.\n-**InvoiceAmount** : Montant total de la facture.\n-**Disputed** : Indique si la facture est contestée (Oui/Non).\n-**SettledDate** : Date à laquelle la facture a été réglée.\n-**PaperlessBill** : Indique si la facture est Électronique ou Papier.\n-**DaysToSettle** : Nombre de jours pris pour régler la facture.\n-**DaysLate** : Nombre de jours de retard dans le règlement de la facture.\n\nVotre rôle est d'aider les utilisateurs à interpréter et analyser ces données pour prendre des décisions éclairées. Vous devez être capable de :\n\n1. **Répondre aux questions spécifiques :** Fournir des réponses précises basées sur les données.\n\n2. **Effectuer des analyses statistiques :** Calculer des moyennes, des médianes, des écarts-types, des corrélations entre différentes variables, etc.\n\n3. **Visualiser les données :** Suggérer ou générer des graphiques pertinents (comme des graphiques en ligne, des histogrammes, des nuages de points) pour illustrer les tendances et les relations dans les données.\n\n\n**Exemples de requêtes utilisateurs :**\n\n- Quel est le délai moyen de paiement des factures non contestées ?\n- Y a-t-il une corrélation entre le montant de la facture et le délai de règlement ?\n- Quels pays présentent les taux de contestation les plus élevés ?\n- Peux-tu visualiser la distribution des montants facturés ?\n- Quelles sont les tendances de paiement au cours des six derniers mois ?\n- Quels clients ont le plus souvent des factures non réglées ?\n- Peux-tu comparer les délais de paiement entre les clients ayant opté pour la facturation sans papier et ceux qui ne l'ont pas fait ?\n\nOUTILS \n\nGenerer Graphique : Cet outil te permet de generer un graphique pour visualiser la requetes de l'utilisateur. \n\nTu dois fournir a cet outils toutes les informations importantes : \n- Type de graphique (histogramme, doughnut, line, etc...)\n- Titre\n- Couleurs\n- Axe X & titre X\n- Axe Y & titre Y\n\nVoici un exemple de ce que tu dois fournir à cet outil : \n\nCréez un histogramme intitulé \"Répartition des jours de retard - Paiements de factures\", avec l'axe des X représentant les \"Jours de retard\" et l'axe des Y le \"Nombre de factures\". Utilisez des barres verticales pour représenter les segments suivants : 0 jours (31 factures, en vert), 2-4 jours (4 factures, en bleu), 5-6 jours (3 factures, en bleu), 7-10 jours (4 factures, en bleu), 11-14 jours (3 factures, en bleu), 15-18 jours (4 factures, en bleu), et 25 jours (1 facture, en bleu). Affichez sous le graphique le nombre total de factures (50), avec des annotations indiquant que 31 factures (62 %) ont été payées à temps, tandis que 19 factures (38 %) ont été payées en retard. Le graphique doit clairement distinguer les factures payées à temps et celles en retard, avec une mise en valeur des proportions et des détails de la répartition.\n\nRépondez de manière informative et analytique, en vous appuyant sur les données disponibles pour fournir des insights pertinents et utiles.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        540,
        300
      ],
      "id": "472108b4-2315-4d72-b12e-53d52b587da6",
      "name": "Data Analyst"
    },
    {
      "parameters": {
        "content": "## Agent Visualisation Graphique",
        "height": 440,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        260,
        660
      ],
      "id": "c95ed7ee-3a7f-4b43-89e6-80455817b293",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Agent Data-Analyst",
        "height": 660,
        "width": 1520,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "de4e2d08-bcf6-46b6-b9f6-65b448560e8a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        320,
        500
      ],
      "id": "a0fa2dcb-bc18-4ffe-b77b-8a36cef7f853",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "GfLb586wOGkPPztD",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "57f142a6-8244-4e36-a493-a72dd6bb723f",
              "name": "reponse",
              "value": "={{\"https://quickchart.io/chart?width=400&c=\" + encodeURIComponent($json.output.toJsonString()) }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        920,
        720
      ],
      "id": "427bbc97-b367-4c59-89b2-7651f234ae2e",
      "name": "Reponse URL"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        140,
        80
      ],
      "id": "cc7ef4df-af8d-42f7-8916-9f22ad654e29",
      "name": "Telegram Trigger",
      "webhookId": "105522ed-2998-4460-aa79-bdd0a6a67f75",
      "credentials": {
        "telegramApi": {
          "id": "TdopjscdaXwD9KAN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"url_graphique\":\"l'url du graphique\",\n  \"synthese_analyse\":\"la synthese de l'analyse sur la requete de l'utiisateur\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        920,
        500
      ],
      "id": "a7ad409c-df72-4ef2-a9bd-17b973b549ac",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "fr"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        540,
        80
      ],
      "id": "9e43d361-3f30-4dbe-9b1a-81a478b6b453",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "v1DLTzLc10CcUL14",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').item.json.message.voice.file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        360,
        80
      ],
      "id": "f5e3bbd8-07b7-4c72-9b52-e4b02f09c215",
      "name": "Telegram",
      "webhookId": "19f6c122-efde-4077-b41c-e1e7c5b39bc3",
      "credentials": {
        "telegramApi": {
          "id": "TdopjscdaXwD9KAN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "71675253-2c48-414a-8666-b515250969bf",
              "name": "requete",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        80
      ],
      "id": "884c71ea-2770-4dc0-b37a-21205db33b88",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "url": "={{ $('Data Analyst').item.json.output.url_graphique.extractUrl().slice(0,-1) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        920,
        300
      ],
      "id": "6fd7d56e-c206-449b-8bcd-e8e77809b563",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        300
      ],
      "id": "2dffb18f-4ca5-43da-b5fa-859879601ff4",
      "name": "Telegram1",
      "webhookId": "1fd714b1-a143-424d-999e-84f79ad59676",
      "credentials": {
        "telegramApi": {
          "id": "TdopjscdaXwD9KAN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $('Data Analyst').item.json.output.synthese_analyse }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1300,
        300
      ],
      "id": "d92ddebc-65d1-4593-a48a-f248cbd2c725",
      "name": "Telegram2",
      "webhookId": "b063c7a1-835d-4847-a4b4-11ce2c494ac2",
      "credentials": {
        "telegramApi": {
          "id": "TdopjscdaXwD9KAN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "memoire_2"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        520,
        500
      ],
      "id": "ff095714-21dc-448b-9561-d617a020451c",
      "name": "Window Buffer Memory"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-02-18T07:31:07.000Z",
  "versionId": "7792846f-4ebc-447a-88d5-7ba1609d70f1"
}